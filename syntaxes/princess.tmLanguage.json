{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Princess",
	"patterns": [
		{ "include": "#comment" },
		{ "include": "#type-decl"},
		{ "include": "#function"},
		{ "include": "#storage" },
		{ "include": "#keywords" },
		{ "include": "#operators" },
		{ "include": "#strings" },
		{ "include": "#numbers"},
		{ "include": "#constants"},
		{ "include": "#identifier"}
	],
	"repository": {
		"identifier": {
			"name": "variable.name.princess",
			"match": "\\b([A-Za-z_][0-9A-Za-z_]*)\\b"
		},
		"pragma": {
			"name": "keyword.control.princess",
			"match": "#[A-Za-z_][0-9A-Za-z_]*"
		},
		"function": {
			"name": "meta.function.princess",
			"begin": "(\\s*(export)|\\s*(import))*\\s*(def)\\s*",
			"beginCaptures": {
				"2": {"name": "keyword.control.share.princess"},
				"3": {"name": "keyword.control.share.princess"},
				"4": {"name": "storage.type.princess"}
			},
			"patterns": [
				{"include": "#pragma" },
				{
					"name": "entity.name.function",
					"match": "\\b([A-Za-z_][0-9A-Za-z_]*)\\b"
				},
				{
					"begin": "{",
					"end": "}"
				},
				{
					"begin": "(",
					"end": ")"
				}
			],
			"end": "(?=\\n)|;"
		},
		"type": {
			"patterns": [
				{
					"name": "meta.struct.princess",
					"begin": "\\b(struct)\\b\\s*{",
					"beginCaptures": {
						"1": {"name": "storage.type.princess"}
					},
					"patterns": [
						{
							"begin": "[^:},]",
							"patterns": [
								{"include": "#identifier"}
							],
							"end": "(?=\\n|:|})"
						}, {
							"begin": "(:)\\s*",
							"beginCaptures": {
								"1": {"name": "punctuation.other.colon.princess"}
							},
							"patterns": [
								{"include": "#type"}
							],
							"end": "(?=\\n|;|,)"
						}
					],
					"end": "}"
				}, {
					"name": "entity.name.type.princess", 
					"match": "\\b([A-Za-z_][0-9A-Za-z_]*)\\b"
				}
			]
		},
		"comma-separator": {
			"begin": "(,)\\s*", 
			"beginCaptures": {
				"1": {"name": "punctuation.other.comma.princess"}
			},
			"end": "(?=[^\\n])"
		},
		"type-decl": {
			"name": "meta.typedecl.princess",
			"begin": "type",
			"beginCaptures": {
				"0": {"name": "keyword.other.type.princess"}
			},
			"patterns": [
				{
					"begin": "[^=]",
					"patterns": [
						{"include": "#identifier"},
						{"include": "#comma-separator"}
					],
					"end": "(?=\\n)|(?==)"
				}, {
					"begin": "=",
					"beginCaptures": {
						"0": {"name": "punctuation.other.equals.princess"}
					},
					"patterns": [
						{"include": "#type"},
						{"include": "#comma-separator"}
					],
					"end": "(?=\\n|;)"
				}
			],
			"end": "(?=\\n|;)"
		},
		"comment": {
			"patterns": [{
				"name": "comment.line.double-dash.princess",
				"match": "\\/\\/.*$"
			}, {
				"name": "comment.block.princess",
				"begin": "\\/\\*",
				"end": "\\*\\/",
				"patterns": [
					{ "include": "#comment" }
				]
			}]
		},
		"storage": {
			"patterns": [{
				"name": "storage.type.princess",
				"match": "\\b(struct|enum|var|let|const|def|interface|weak_ref)\\b"
			}, {
				"name": "storage.type.built-in.princess",
				"match": "\\b(unsigned|word|bool|char|byte|short|int|long|ubyte|ushort|uint|ulong|int8|int16|int32|int64|uint8|uint16|uint32|uint64|float|double|float32|float64|size_t|string)\\b"
			}]
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.control.princess",
				"match": "\\b(if|else|while|for|in|return|loop|switch|case|go_to|break|continue|defer|assert|as)\\b"
			}, {
				"name": "keyword.control.share.princess",
				"match": "\\b(export|import)\\b"
			}, {
				"name": "keyword.other.type.princess",
				"match": "\\b(type|defined|type_of)\\b"
			}]
		},
		"operators" : {
			"patterns": [{
				"name": "keyword.operator.sizeof.princess",
				"match": "\\b(size_of|align_of)\\b"
			}, {
				"name": "keyword.operator.arrow.princess",
				"match": "->"
			}, {
				"name": "keyword.operator.assignment.compound.princess",
				"match": "%=|\\+=|-=|\\*=|\\/="
			}, {
				"name": "keyword.operator.assignment.compound.bitwise.princess",
				"match": "&=|\\^=|<<=|>>=|\\|="
			}, {
				"name": "keyword.operator.cast.princess",
				"match": "!!|!"
			}, {
				"name": "keyword.operator.bitwise.princess",
				"match": "&|\\||\\^"
			}, {
				"name": "keyword.operator.bitwise.shift.princess",
				"match": ">>|<<"
			}, {
				"name": "keyword.operator.comparison.princess",
				"match": "==|!=|>=|<=|>|<"
			}, {
				"name": "keyword.operator.logical.princess",
				"match": "\\b(and|or|not)\\b"
			}, {
				"name": "keyword.operator.assignment.princess",
				"match": "="
			}, {
				"name": "keyword.operator.princess",
				"match": "%|\\*|\\/|-|\\+"
			}]
		},
		"numbers": {
			"patterns": [{
				"name": "constant.numeric.oct.princess",
				"match": "0o[0-7]+"
			}, {
				"name": "constant.numeric.bin.princess",
				"match": "0b[01]+"
			}, {
				"name": "constant.numeric.hex.princess",
				"match": "0x(\\d|[a-fA-F])+"
			}, {
				"name": "constant.numeric.float.princess",
				"match": "[-+]?(\\d+\\.\\d*|\\d*\\.\\d+)([Ee][-+]?\\d+)?"
			}, {
				"name": "constant.numeric.integer.princess",
				"match": "[-+]?\\d+"
			}]
		},
		"constants": {
			"patterns": [{
				"name": "constant.language.boolean.princess",
				"match": "\\b(true|false)\\b"
			}, {
				"name": "constant.language.null.princess",
				"match": "\\b(null)\\b"
			}, {
				"name": "constant.language.undef.princess",
				"match": "\\b(undef)\\b"
			}]
		},
		"escapes": {
			"patterns": [{
				"name": "constant.character.escape.princess",
				"match": "\\\\x[F-a0-9]{2}"
			}, {
				"name": "constant.character.escape.princess",
				"match": "\\\\u[F-a0-9]{4}"
			}, {
				"name": "constant.character.escape.princess",
				"match": "\\\\U[F-a0-9]{8}"
			}, {
				"name": "constant.character.escape.princess",
				"match": "\\\\."
			}]
		},
		"strings": {
			"patterns": [{
				"name": "string.quoted.triple.princess",
				"begin": "\"\"\"",
				"end": "\"\"\"",
				"patterns": [{ "include": "#escapes" }]
			}, {
				"name": "string.quoted.double.princess",
				"begin": "\"",
				"end": "\"",
				"patterns": [{ "include": "#escapes" }]
			}, {
				"name": "string.quoted.single.princess",
				"begin": "'",
				"end": "'",
				"patterns": [{ "include": "#escapes" }]
			}]
		}
	},
	"scopeName": "source.princess"
}
