{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Princess",
	"patterns": [
		{ "include": "#statement" }
	],
	"repository": {
		"statement": {
			"patterns": [
				{ "include": "#type-decl" },
				{ "include": "#const-decl" },
				{ "include": "#var-decl" },
				{ "include": "#function-decl" },
				{ "include": "#from-import" },
				{ "include": "#import" },
				{ "include": "#expression" }
			]
		},
		"expression": {
			"patterns": [
				{ "include": "#pragma" },
				{ "include": "#blocks" },
				{ "include": "#comment" },
				{ "include": "#type-ref" },
				{ "include": "#function-call" },
				{ "include": "#storage" },
				{ "include": "#keywords" },
				{ "include": "#operators" },
				{ "include": "#strings" },
				{ "include": "#numbers" },
				{ "include": "#constants" },
				{ "include": "#builtin-types"}, 
				{ "include": "#identifier" }
			]
		},
		"identifier": {
			"match": "\\b(([A-Za-z_][0-9A-Za-z_]*)(::))*([A-Za-z_][0-9A-Za-z_]*)\\b",
			"captures": {
				"2": {"name": "entity.name.namespace.princess"},
				"3": {"name": "punctuation.other.doublecolon.princess"},
				"4": {"name": "variable.name.princess"}
			}
		},
		"function-call": {
			"begin": "\\b(([A-Za-z_][0-9A-Za-z_]*)(::))*([A-Za-z_][0-9A-Za-z_]*)\\b\\(",
			"end": "\\)",
			"beginCaptures": {
				"2": {"name": "entity.name.namespace.princess"},
				"3": {"name": "punctuation.other.doublecolon.princess"},
				"4": {"name": "entity.name.function.princess"}
			},
			"patterns": [
				{"include": "#expression"},
				{"include": "#comma-separator"}
			]
		},
		"builtin-types": {
			"name": "storage.type.built-in.princess",
			"match": "\\b(unsigned|word|bool|char|byte|short|int|long|ubyte|ushort|uint|ulong|int8|int16|int32|int64|uint8|uint16|uint32|uint64|float|double|float32|float64|size_t|string)\\b"
		},
		"type-name": {
			"patterns": [
				{
					"name": "storage.type.built-in.princess",
					"match": "\\b(unsigned|word|bool|char|byte|short|int|long|ubyte|ushort|uint|ulong|int8|int16|int32|int64|uint8|uint16|uint32|uint64|float|double|float32|float64|size_t|string)\\b"
				}, {
					"name": "entity.name.type.princess",
					"match": "\\b([A-Za-z_][0-9A-Za-z_]*)\\b"
				}
			]
		},
		"pragma": {
			"name": "keyword.control.princess",
			"match": "#[A-Za-z_][0-9A-Za-z_]*+"
		},
		"function-arguments": {
			"begin": "\\(",
			"patterns": [
				{"include": "#expression"}
			],
			"end": "\\)"
		},
		"function-decl": {
			"name": "meta.function.princess",
			"begin": "\\b(export)?\\b\\s*(import)?\\b\\s*(def)\\b",
			"beginCaptures": {
				"1": {"name": "keyword.control.share.princess"},
				"2": {"name": "keyword.control.share.princess"},
				"3": {"name": "storage.type.princess"}
			},
			"patterns": [
				{
					"match": "(?<inner>([^\\(\\)\"]++|\"[^\"\\\\]*(\\\\.[^\"\\\\]*)*\")*){0}([A-Za-z#_][A-Za-z_0-9]++)\\s*(?<paren>\\g<inner>?+|(\\(\\g<inner>\\g<paren>\\g<inner>\\))++)(?=\\s*[A-Za-z#_][A-Za-z_0-9]*\\s*)",
					"captures": {
						"4": { "name": "keyword.control.macro.princess" },
						"5": {
							"patterns": [
								{"include": "#function-arguments"}
							]
						}
					}
				}, {
					"include": "#pragma"
				}, {
					"name": "keyword.control.macro.princess",
					"match": "([A-Za-z_][A-Za-z_0-9]*)++(?=\\s*[A-Za-z_][0-9A-Za-z_]*)"
				}, {
					"name": "entity.name.function",
					"match": "\\b([A-Za-z_][0-9A-Za-z_]*)\\b"
				}, {
					"name": "meta.function.arguments.princess",
					"begin": "\\(",
					"patterns": [
						{ 
							"match": "\\b([A-Za-z_][0-9A-Za-z_]*+)\\b(?=\\s*:)",
							"captures": {
								"0": { "name": "variable.parameter.princess" }
							}
						}, {
							"begin": ":",
							"beginCaptures": {
								"1": {"name": "punctuation.other.colon.princess"}
							},
							"patterns": [
								{"include": "#type"},
								{"include": "#comment"}
							],
							"end": "(?=\\)|,|=)"
						}, {
							"begin": "=",
							"beginCaptures": {
								"0": {"name": "keyword.operator.assignment.princess"}
							},
							"end": "(?=\\)|,)",
							"patterns": [
								{"include": "#expression"}
							]
						}, {
							"include": "#comma-separator"
						}
					],
					"end": "(?=})|\\)"
				}, {
					"name": "meta.return-type.princess",
					"begin": "->",
					"end": "(?={|\\n)",
					"beginCaptures": {
						"0": {"name": "punctuation.other.arrow"}
					},
					"patterns": [
						{"include": "#type"}
					]
				}, {
					"name": "meta.function.body.princess",
					"begin": "{",
					"patterns": [
						{ "include": "#statement" }
					],
					"end": "}"
				}, {
					"include": "#comment"
				}
			],
			"end": "(?=\\n|})|;"
		},
		"const-decl": {
			"begin": "\\b(export)?\\b\\s*(import)?\\b\\s*(const)\\b",
			"end": "\\n|;",
			"beginCaptures": {
				"1": {"name": "keyword.control.share.princess"},
				"2": {"name": "keyword.control.share.princess"},
				"3": {"name": "storage.type.const.princess"}
			},
			"patterns": [
				{
					"name": "variable.other.constant",
					"match": "\\b([A-Za-z_][0-9A-Za-z_]++)\\b"
				}, {
					"include": "#pragma"
				}, {
					"begin": ":",
					"beginCaptures": { 
						"0": {"name": "punctuation.other.colon.princess"}
					},
					"patterns": [
						{"include": "#type"}
					],
					"end": "(?=\\n|=)"
				}, {
					"begin": "=",
					"beginCaptures": { 
						"0": {"name": "keyword.operator.assignment.princess"}
					},
					"patterns": [
						{"include": "#expression"}
					],
					"end": "(?=\\n|;)"
				}
			]
		},
		"var-decl": {
			"begin": "\\b(export)?\\b\\s*(import)?\\b\\s*((var)|(let))\\b",
			"end": "\\n|;",
			"beginCaptures": {
				"1": {"name": "keyword.control.share.princess"},
				"2": {"name": "keyword.control.share.princess"},
				"4": {"name": "storage.type.var.princess"},
				"5": {"name": "storage.type.let.princess"}
			},
			"patterns": [
				{
					"name": "variable.other.princess",
					"match": "\\b([A-Za-z_][0-9A-Za-z_]++)\\b"
				}, {
					"include": "#pragma"
				}, {
					"begin": ":",
					"beginCaptures": { 
						"0": {"name": "punctuation.other.colon.princess"}
					},
					"patterns": [
						{"include": "#type"}
					],
					"end": "(?=\\n|=)"
				}, {
					"begin": "=",
					"beginCaptures": { 
						"0": {"name": "keyword.operator.assignment.princess"}
					},
					"patterns": [
						{"include": "#expression"}
					],
					"end": "(?=\\n|;)"
				}
			]
		},
		"import": {
			"name": "meta.import.princess",
			"begin": "\\b(export)?\\b\\s*(import)\\b",
			"end": "\\n|;",
			"beginCaptures": {
				"1": {"name": "keyword.control.share.princess"},
				"2": {"name": "keyword.control.share.princess"}
			},
			"patterns": [
				{
					"match": "\\b(as)\\b([A-Za-z_][0-9A-Za-z_]++)\\b",
					"captures": {
						"1": { "name": "keyword.control.as.princess" },
						"2": { "name": "entity.name.namespace.princess" }
					}
				}, {
					"name": "entity.name.namespace.princess",
					"match": "\\b([A-Za-z_][0-9A-Za-z_]++)\\b"
				}, {
					"include": "#comma-separator"
				}, {
					"include": "#comment"
				}
			]
		},
		"from-import": {
			"name": "meta.import.princess",
			"begin": "\\b(from)\\b",
			"end": "\\n|;",
			"beginCaptures": {
				"1": {"name": "keyword.control.from.princess"}
			},
			"patterns": [
				{
					"name": "keyword.control.import.princess",
					"begin": "\\b(import)\\b",
					"end": "(?=\\n|;)",
					"patterns": [
						{ "include": "#identifier" },
						{ "include": "#comma-separator" }, 
						{ "include": "#comment" }
					]
				}, {
					"name": "entity.name.namespace.princess",
					"match": "\\b([A-Za-z_][0-9A-Za-z_]++)\\b"
				}, {
					"include": "#comment"
				}
			]
		},
		"type": {
			"patterns": [
				{
					"include": "#comment"
				}, {
					"name": "meta.type.reference.princess",
					"begin": "\\s*&\\s*",
					"patterns": [{"include": "#type"}],
					"end": "(?=[\\)}\\],\\n])"
				}, {
					"name": "meta.struct.princess",
					"begin": "\\b(struct)\\b",
					"end": "(?<=})",
					"beginCaptures": {
						"1": {"name": "storage.type.princess"}
					},
					"patterns": [
						{
							"include": "#comment"
						}, {
							"include": "#pragma"
						}, {
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"include": "#comment"
								}, {
									"begin": ":",
									"beginCaptures": {
										"1": {"name": "punctuation.other.colon.princess"}
									},
									"patterns": [
										{"include": "#type"}
									],
									"end": "(?=([A-Za-z_][0-9A-Za-z_]*\\s*:)|[};])"
								}, {
									"include": "#keyword"
								}, {
									"include": "#identifier"
								}
							]
						}
					]
				}, {
					"name": "meta.interface.princess",
					"begin": "\\b(interface)\\b",
					"end": "(?<=})",
					"beginCaptures": {
						"1": {"name": "storage.type.princess"}
					},
					"patterns": [
						{
							"include": "#comment"
						}, {
							"include": "#pragma"
						}, {
							"begin": "{",
							"end": "}",
							"patterns": [
								{"include": "#comment"},
								{"include": "#function-decl"},
								{"include": "#keyword"}
							]
						}
					]
				}, {
					"name": "meta.enum.princess",
					"begin": "\\b(enum)\\b",
					"end": "(?<=})",
					"beginCaptures": {
						"1": {"name": "storage.type.princess"}
					},
					"patterns": [
						{
							"include": "#comment"
						}, {
							"include": "#pragma"
						}, {
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"include": "#comment"
								}, {
									"include": "#keyword"
								}, {
									"name": "variable.other.enummember.princess",
									"match": "[A-Za-z_][0-9A-Za-z_]++"
								}, {
									"begin": "=",
									"patterns": [
										{"include": "#expression"}
									],
									"end": "(?=(^\\s*|;)([A-Za-z_][0-9A-Za-z_]*)|[};])"
								}
							]
						}
					]
				}, {
					"begin": "\\[([^\\]]*);",
					"beginCaptures": {
						"1": {
							"patterns": [
								{"include": "#expression"}
							]
						}
					},
					"patterns": [
						{"include": "#type"}
					],
					"end": "\\]"
				}, {
					"begin": "\\[",
					"patterns": [
						{"include": "#type"}
					],
					"end": "\\]"
				}, {
					"begin": "\\b(def)?\\b\\s*\\(",
					"beginCaptures": {
						"0": { "name": "keyword.other.funref.princess" }
					},
					"patterns": [
						{"include": "#type"},
						{"include": "#comma-separator"}
					],
					"end": "\\)"
				}, {
					"begin": "->\\s*\\(",
					"patterns": [
						{"include": "#type"},
						{"include": "#comma-separator"}
					],
					"end": "\\)"
				}, {
					"begin": "->",
					"patterns": [
						{"include": "#type"}
					],
					"end": "(?=[\\n\\)},])"
				}, {
 					"include": "#keywords"
				}, {
					"include": "#type-name"
				}
			]
		},
		"type-ref": {
			"begin": "\\b(type)\\b",
			"beginCaptures": {
				"0": { "name": "keyword.other.type.princess" }
			},
			"patterns": [
				{"include": "#comment"},
				{"include": "#type"},
				{"include": "#keyword"}
			],
			"end": "(?=[\\n\\)},])"
		},
		"comma-separator": {
			"begin": "(,)\\s*", 
			"beginCaptures": {
				"1": {"name": "punctuation.other.comma.princess"}
			},
			"end": "(?=[^\\n])"
		},
		"type-decl": {
			"name": "meta.typedecl.princess",
			"begin": "\\b(export)?\\b(import)?\\b(type)\\b",
			"beginCaptures": {
				"1": {"name": "keyword.control.share.princess"},
				"2": {"name": "keyword.control.share.princess"},
				"3": {"name": "keyword.other.type.princess"}
			},
			"patterns": [
				{"include": "#comma-separator"},
				{
					"begin": "=",
					"beginCaptures": {
						"0": {"name": "keyword.operator.assignment.princess"}
					},
					"patterns": [
						{"include": "#type"},
						{"include": "#comma-separator"}
					],
					"end": "(?=\\n|;)"
				},
				{"include": "#keywords"},
				{"include": "#type-name"}
			],
			"end": "(?=\\n|;)"
		},
		"blocks": {
			"patterns": [
				{
					"begin": "{",
					"end": "}",
					"patterns": [
						{"include": "#expression"}
					]
				}, {
					"begin": "\\[", 
					"end": "\\]",
					"patterns": [
						{"include": "#comma-separator"},
						{"include": "#expression"}
					]
				}, {
					"begin": "\\(", 
					"end": "\\)",
					"patterns": [
						{"include": "#expression"}
					]
				}
			]
		},
		"comment": {
			"patterns": [{
				"name": "comment.line.double-dash.princess",
				"match": "\\/\\/.*$"
			}, {
				"name": "comment.block.princess",
				"begin": "\\/\\*",
				"end": "\\*\\/",
				"patterns": [
					{ "include": "#comment" }
				]
			}]
		},
		"keywords": {
			"patterns": [{
				"name": "storage.type.princess",
				"match": "\\b(struct|enum|var|let|const|def|interface|weak_ref)\\b"
			}, {
				"name": "keyword.control.princess",
				"match": "\\b(if|else|while|for|in|return|loop|switch|case|go_to|break|continue|defer|assert|as)\\b"
			}, {
				"name": "keyword.control.share.princess",
				"match": "\\b(export|import)\\b"
			}, {
				"name": "keyword.other.type.princess",
				"match": "\\b(type|defined|type_of)\\b"
			}, {
				"name": "keyword.operator.sizeof.princess",
				"match": "\\b(size_of|align_of)\\b"
			}, {
				"name": "keyword.operator.arrow.princess",
				"match": "->"
			}, {
				"name": "keyword.operator.assignment.compound.princess",
				"match": "%=|\\+=|-=|\\*=|\\/="
			}, {
				"name": "keyword.operator.assignment.compound.bitwise.princess",
				"match": "&=|\\^=|<<=|>>=|\\|="
			}, {
				"name": "keyword.operator.cast.princess",
				"match": "!!|!"
			}, {
				"name": "keyword.operator.bitwise.princess",
				"match": "&|\\||\\^"
			}, {
				"name": "keyword.operator.bitwise.shift.princess",
				"match": ">>|<<"
			}, {
				"name": "keyword.operator.comparison.princess",
				"match": "==|!=|>=|<=|>|<"
			}, {
				"name": "keyword.operator.logical.princess",
				"match": "\\b(and|or|not)\\b"
			}, {
				"name": "keyword.operator.assignment.princess",
				"match": "="
			}, {
				"name": "keyword.operator.princess",
				"match": "%|\\*|\\/|-|\\+"
			}, {
				"include": "#constants"
			}]
		},
		"numbers": {
			"patterns": [{
				"name": "constant.numeric.oct.princess",
				"match": "0o[0-7]+"
			}, {
				"name": "constant.numeric.bin.princess",
				"match": "0b[01]+"
			}, {
				"name": "constant.numeric.hex.princess",
				"match": "0x(\\d|[a-fA-F])+"
			}, {
				"name": "constant.numeric.float.princess",
				"match": "[-+]?(\\d+\\.\\d*|\\d*\\.\\d+)([Ee][-+]?\\d+)?"
			}, {
				"name": "constant.numeric.integer.princess",
				"match": "[-+]?\\d+"
			}]
		},
		"constants": {
			"patterns": [{
				"name": "constant.language.boolean.princess",
				"match": "\\b(true|false)\\b"
			}, {
				"name": "constant.language.null.princess",
				"match": "\\b(null)\\b"
			}, {
				"name": "constant.language.undef.princess",
				"match": "\\b(undef)\\b"
			}]
		},
		"escapes": {
			"patterns": [{
				"name": "constant.character.escape.princess",
				"match": "\\\\x[F-a0-9]{2}"
			}, {
				"name": "constant.character.escape.princess",
				"match": "\\\\u[F-a0-9]{4}"
			}, {
				"name": "constant.character.escape.princess",
				"match": "\\\\U[F-a0-9]{8}"
			}, {
				"name": "constant.character.escape.princess",
				"match": "\\\\."
			}]
		},
		"strings": {
			"patterns": [{
				"name": "string.quoted.triple.princess",
				"begin": "\"\"\"",
				"end": "\"\"\"",
				"patterns": [{ "include": "#escapes" }]
			}, {
				"name": "string.quoted.double.princess",
				"begin": "\"",
				"end": "\"",
				"patterns": [{ "include": "#escapes" }]
			}, {
				"name": "string.quoted.single.princess",
				"begin": "'",
				"end": "'",
				"patterns": [{ "include": "#escapes" }]
			}]
		}
	},
	"scopeName": "source.princess"
}
